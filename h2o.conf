# to find out the configuration commands, run: h2o --help

# STDERROR: env["rack.errors"].puts(env)

# globa setting
file.send-compressed: ON
send-server-name: OFF
header.unset: "Last-Modified"

pid-file: ../pid/h2o.pid
error-log: ../logs/error_log
access-log: &logger
  path: "| rotatelogs ../logs/access_log.%Y%m%d 86400"
  # was "%{Save-Data}i\"\t\"%{x-http2-push}o\""
  #format: DateTimeMilli RemoteIP Protocol Status Method Host PathQuery UA Referer ResTime {Headers}
  format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t{\"save-data\":\"%{Save-Data}i\",\"dpr\":\"%{DPR}i\",\"content-dpr\":\"%{Content-DPR}i\",\"width\":\"%{Width}i\",\"viewport-width\":\"%{Viewport-Width}i\",\"range\":\"%{Range}i\",\"origin\":\"%{Origin}i\",\"sec-metadata\":\"%{Sec-Metadata}i\",\"sec-origin-policy\":\"%{Sec-Origin-Policy}i\",\"sec-ch-ua\":\"%{Sec-Ch-UA}i\",\"sec-fetch-dest\":\"%{Sec-Fetch-Dest}i\",\"sec-fetch-mode\":\"%{Sec-Fetch-Mode}i\",\"sec-fetch-site\":\"%{Sec-Fetch-Site}i\",\"sec-fetch-user\":\"%{Sec-Fetch-User}i\"}"

error-doc:
  - status: 404
    url: /assets/img/404.svg
  - status: 500
    url: /assets/img/500.svg
  - status: 501
    url: /assets/img/501.svg

file.mime.addtypes:
  "text/plain; charset=utf-8": ".txt"
  "text/plain; charset=utf-8": ".md"
  "text/plain; charset=utf-8": ".log"
  "application/xml; charset=utf-8": ".xml"
  "application/signed-exchange;v=b2": ".sxg"
  "application/cert-chain+cbor": ".cbor"


file.custom-handler:
  extension: .cgi
  fastcgi.spawn:
    command: "exec /home/jxck/dotfiles/local/h2o/share/h2o/fastcgi-cgi"

# Proxy List
# https://ws.jxck.io         => http://127.0.0.1:6000
# <del>https://rails.jxck.io => http://127.0.0.1:7000</del>
# https://report-uri.jxck.io => http://127.0.0.1:8000
# https://labs.jxck.io/webauthentication/fido-u2f => http://127.0.0.1:9000

# in path directive
# path:
#   header: 1st
#   mruby:  2nd
#   file:   3rd
hosts:
  "jxck.io:80":
    listen:
      port: 80
    paths:
      "/":
        redirect:
          status: 308
          url: https://jxck.io:443/
  "jxck.io:443":

    # Reporing
    header.add: "Report-To: {\"group\":\"default\", \"include-subdomains\":false, \"max_age\":864000, \"endpoints\":{\"url\":\"https://report-uri.jxck.io\"}}"

    # HSTS
    header.add: "Strict-Transport-Security: max-age=31536000"

    # CSP
    header.add: "Content-Security-Policy-Report-Only: default-src 'self' https://*.jxck.io https://www.google-analytics.com; connect-src https://report-uri.jxck.io; report-uri https://report-uri.jxck.io; report-to default"

    # Expect-CT
    header.add: "Expect-CT: max-age=31536000, report-uri https://report-uri.jxck.io;"

    # Feature Policy
    header.add: "Feature-Policy: unsized-media 'none'; sync-xhr 'none'; sync-script 'none'"
    # feature-policy-reporting
    header.add: "Origin-Trial: Ai/hV+GImR+ZU3XWvzurUJn3mGsDMBaTJCDzdCuBqLt3ZRrf64tJydNww0SbOm4TN9P6eug1O47MnEDWTpWMawAAAABqeyJvcmlnaW4iOiJodHRwczovL2p4Y2suaW86NDQzIiwiZmVhdHVyZSI6IkZlYXR1cmVQb2xpY3lSZXBvcnRpbmciLCJleHBpcnkiOjE1NjM5MjYzOTksImlzU3ViZG9tYWluIjp0cnVlfQ=="

    # Network Error Logging (no success, all error)
    header.add: "NEL: {\"report-to\":\"default\", \"max-age\":864000, \"include-subdomains\":false, \"success-fraction\":0, \"error-fraction\":1.0}"

    # Cache
    header.add: "Cache-Control: max-age=1, stale-while-revalidate=600, stale-if-error=864000"

    # no-sniff
    header.add: "X-Content-Type-Options: nosniff"

    # Client Hints
    header.add: "Accept-CH: DPR, Content-DPR, Width, Viewport-Width, Save-Data"
    header.add: "Accept-CH-Lifetime: 86400"
    header.add: "Vary: DPR, Content-DPR, Width, Viewport-Width, Save-Data"

    listen: &https
      port: 443
      ssl:
        key-file: /etc/letsencrypt/live/jxck.io/privkey.pem
        certificate-file: /etc/letsencrypt/live/jxck.io/fullchain.pem
        minimum-version: TLSv1.2
        cipher-suite: "AESGCM:HIGH:!3DES:!RSA:!aNULL:!eNULL:!MD5"
        cipher-preference: server
    paths:
      <<: !file h2o.security.conf

      # common.h2o.conf
      "/favicon.ico":
        header.add: "Content-Type: image/x-icon"
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/favicon.ico
      "/apple-touch-icon-precomposed.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/apple-touch-icon.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/humans.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/humans.txt
      "/security.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/security.txt
      "/ads.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/ads.txt
      "/.well-known":
        header.unset: "Content-Security-Policy-Report-Only"
        file.dir: ./www.jxck.io/.well-known
      # common.h2o.conf

      "/logo":
        redirect:
          status: 308
          url: https://logo.jxck.io:443/
      "/assets/font":
        mruby.handler-file: .mruby.handler/cors.rb # check my origin
        header.set: "Cache-Control: max-age=31536000, immutable"
        file.dir: ./www.jxck.io/assets/font
      "/assets/js":
        mruby.handler-file: .mruby.handler/cors.rb # check my origin
        file.dir: ./www.jxck.io/assets/js
      "/":
        mruby.handler-file: .mruby.handler/robots.rb
        file.dir: ./www.jxck.io
  "www.jxck.io:80":
    listen:
      port: 80
    paths:
      "/":
        redirect:
          status: 308
          url: https://jxck.io:443/
  "www.jxck.io:443":
    listen:
      <<: *https
    paths:
      "/":
        redirect:
          status: 308
          url: https://jxck.io:443/
  "blog.jxck.io:80":
    listen:
      port: 80
    paths:
      "/":
        redirect:
          status: 308
          url: https://blog.jxck.io:443/
  "blog.jxck.io:443":
    header.add: "Report-To: {\"group\":\"default\", \"include-subdomains\":false, \"max_age\":864000, \"endpoints\":{\"url\":\"https://report-uri.jxck.io\"}}"
    header.add: "Strict-Transport-Security: max-age=31536000"
    header.add: "Expect-CT: max-age=31536000, report-uri https://report-uri.jxck.io"
    header.add: "Cache-Control: max-age=1, stale-while-revalidate=600, stale-if-error=864000"
    header.add: "X-Content-Type-Options: nosniff"
    header.add: "NEL: {\"report-to\":\"default\", \"max-age\":864000, \"include-subdomains\":false, \"success-fraction\":0, \"error-fraction\":1.0}"

    listen:
      <<: *https
    paths:
      <<: !file h2o.security.conf

      # common.h2o.conf
      "/favicon.ico":
        header.add: "Content-Type: image/x-icon"
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/favicon.ico
      "/apple-touch-icon-precomposed.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/apple-touch-icon.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/humans.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/humans.txt
      "/security.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/security.txt
      "/ads.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/ads.txt
      "/.well-known":
        header.unset: "Content-Security-Policy-Report-Only"
        file.dir: ./www.jxck.io/.well-known
      # common.h2o.conf

      "/google9ea6e3c69af302c2.html":
        file.file: ./www.jxck.io/assets/file/google9ea6e3c69af302c2.html
      "/feeds":
        file.dir: ./blog.jxck.io/feeds
      "/assets/js/sw.js":
        header.add: "Service-Worker-Allowed: /"
        file.file: ./www.jxck.io/assets/js/sw.js
      "/assets/img/jxck.png":
        header.add: "Cache-Control: max-age=600, immutable"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/assets/font":
        header.set: "Cache-Control: max-age=31536000, immutable"
        file.dir: ./www.jxck.io/assets/font
      "/":
        header.add: "Feature-Policy: unsized-media https://www.youtube.com; sync-xhr 'none'; sync-script https://www.youtube.com"
        # feature-policy-reporting
        header.add: "Origin-Trial: Ai/hV+GImR+ZU3XWvzurUJn3mGsDMBaTJCDzdCuBqLt3ZRrf64tJydNww0SbOm4TN9P6eug1O47MnEDWTpWMawAAAABqeyJvcmlnaW4iOiJodHRwczovL2p4Y2suaW86NDQzIiwiZmVhdHVyZSI6IkZlYXR1cmVQb2xpY3lSZXBvcnRpbmciLCJleHBpcnkiOjE1NjM5MjYzOTksImlzU3ViZG9tYWluIjp0cnVlfQ=="
        mruby.handler-file: .mruby.handler/robots.rb
        mruby.handler-file: .mruby.handler/index.rb
        mruby.handler-file: .mruby.handler/csp.rb
        file.dir: ./blog.jxck.io
  "slide.jxck.io:80":
    listen:
      port: 80
    paths:
      "/":
        redirect:
          status: 308
          url: https://slide.jxck.io:443/
  "slide.jxck.io:443":
    header.add: "Strict-Transport-Security: max-age=31536000"
    listen:
      <<: *https
    paths:

      # common.h2o.conf
      "/favicon.ico":
        header.add: "Content-Type: image/x-icon"
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/favicon.ico
      "/apple-touch-icon-precomposed.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/apple-touch-icon.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/humans.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/humans.txt
      "/security.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/security.txt
      "/ads.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/ads.txt
      "/.well-known":
        header.unset: "Content-Security-Policy-Report-Only"
        file.dir: ./www.jxck.io/.well-known
      # common.h2o.conf

      "/":
        mruby.handler-file: .mruby.handler/robots.rb
        file.dir: ./slide.jxck.io
  "labs.jxck.io:80":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    listen:
      port: 80
    paths: &labs-path

      # common.h2o.conf
      "/favicon.ico":
        header.add: "Content-Type: image/x-icon"
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/favicon.ico
      "/apple-touch-icon-precomposed.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/apple-touch-icon.png":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/assets/img/jxck.png
      "/humans.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/humans.txt
      "/security.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/security.txt
      "/ads.txt":
        header.unset: "Content-Security-Policy-Report-Only"
        file.file: ./www.jxck.io/ads.txt
      "/.well-known":
        header.unset: "Content-Security-Policy-Report-Only"
        file.dir: ./www.jxck.io/.well-known
      # common.h2o.conf

      "/":
        mruby.handler-file: .mruby.handler/logger.rb
        mruby.handler-file: .mruby.handler/robots.rb
        file.dir: ./labs.jxck.io
      "/assets":
        header.add: "Access-Control-Allow-Methods: GET, HEAD, OPTIONS"
        header.add: "Access-Control-Allow-Origin: *"
        file.dir: ./labs.jxck.io/assets
      "/mixed":
        mruby.handler: |
          Proc.new do |env|
            headers = {}
            env.each {|k, v|
              if k.start_with?("HTTP_")
                headers[k[5..-1].downcase] = v
              end
            }
            case env["QUERY_STRING"]
            when "upgrade-insecure-request"
              headers["Content-Security-Policy"] = "upgrade-insecure-requests"
            when "block-all-mixed-content"
              headers["Content-Security-Policy"] = "block-all-mixed-content; report-uri /mixed/report-to.cgi; report-to report-to.cgi;"
              headers["Report-To"] = '{ "url": "/mixed/report-to.cgi", "group": "report-to.cgi", "max-age": 10886400 }'
            end
            [399, headers, []]
          end
        file.dir: ./labs.jxck.io/mixed
      "/service-worker/link-rel-service-worker":
        mruby.handler: |
          Proc.new do |env|
            if /\/random\z/.match(env["PATH_INFO"])
              headers = {
                "Content-Type" => "text/plain; charset=utf-8",
                "Link" => "</service-worker/link-rel-service-worker/random.js>; rel=\"serviceworker\"",
                "Origin-Trial" => "Ai32KiE0NsOIRPR/NxvUwEpcM4hYyo6RPRvkG8liNEIXP4DW6furrliZkqCqZh/ug83oAcdctA12PEh3ymNUZg0AAABneyJvcmlnaW4iOiAiaHR0cHM6Ly9qeGNrLmlvOjQ0MyIsICJpc1N1YmRvbWFpbiI6IHRydWUsICJmZWF0dXJlIjogIkZvcmVpZ25GZXRjaCIsICJleHBpcnkiOiAxNDg0NTgyMTg2fQ=="
              }
              body = [
                rand(100)
              ]
              [200, headers, body]
            else
              [399, {}, []]
            end
          end
        file.dir: ./labs.jxck.io/service-worker/link-rel-service-worker
      "/service-worker/foreign-fetch":
        header.set: "Origin-Trial: Ai32KiE0NsOIRPR/NxvUwEpcM4hYyo6RPRvkG8liNEIXP4DW6furrliZkqCqZh/ug83oAcdctA12PEh3ymNUZg0AAABneyJvcmlnaW4iOiAiaHR0cHM6Ly9qeGNrLmlvOjQ0MyIsICJpc1N1YmRvbWFpbiI6IHRydWUsICJmZWF0dXJlIjogIkZvcmVpZ25GZXRjaCIsICJleHBpcnkiOiAxNDg0NTgyMTg2fQ=="
        file.dir: ./labs.jxck.io/service-worker/foreign-fetch

      "/service-worker/cache-expire":
        header.set: "Cache-Control: max-age=5"
        file.dir: ./labs.jxck.io/service-worker/cache-expire

      "/stale-while-revalidate/random":
        header.add: "Cache-Control: max-age=5, stale-while-revalidate=10, stale-if-error=15"
        mruby.handler-file: .mruby.handler/random.rb
        file.dir: ./labs.jxck.io/stale-while-revalidate
      "/content-security-policy":
        header.add: "Content-Security-Policy: default-src 'self'; report-uri /content-security-policy/report-to.cgi; report-to report-to.cgi;"
        header.add: 'Report-To: { "url": "/content-security-policy/report-to.cgi", "group": "report-to.cgi", "max-age": 10886400 }'
        file.dir: ./labs.jxck.io/content-security-policy
      "/content-security-policy/sandbox.html":
        header.add: "Content-Security-Policy: sandbox" # no reporting
        file.file: ./labs.jxck.io/content-security-policy/sandbox.html
      "/content-security-policy/navigate-to.html":
        header.add: "Content-Security-Policy: navigate-to none; report-uri /content-security-policy/report-to.cgi; report-to report-to.cgi;"
        header.add: 'Report-To: { "url": "/content-security-policy/report-to.cgi", "group": "report-to.cgi", "max-age": 10886400 }'
        file.file: ./labs.jxck.io/content-security-policy/navigate-to.html
      "/public-key-pinning":
        header.add: "Public-Key-Pins: max-age=3600; pin-sha256=\"7JT7NhX2St/VBBkRi4BO427M7ytLy7p3CRYPtHpSm7c=\"; pin-sha256=\"+WpRHNpAId2FIOvVgwmS3HsG+eJtERKC4/qM1tQaeRk=\"; report-uri /public-key-pinning/report-to.cgi; report-to report-to.cgi;"
        header.add: 'Report-To: { "url": "/public-key-pinning/report-to.cgi", "group": "report-to.cgi", "max-age": 10886400 }'
        file.dir: ./labs.jxck.io/public-key-pinning
      "/expect-ct":
        header.add: "Expect-CT: max-age=100, enforce, test-report, report-uri /expect-ct/report-to.cgi; report-to report-to.cgi;"
        header.add: 'Report-To: { "url": "/expect-ct/report-to.cgi", "group": "report-to.cgi", "max-age": 10886400 }'
        file.dir: ./labs.jxck.io/expect-ct
      "/trusted-types/policy.html":
        header.add: "Origin-Trial: ApMr/bLqSvYzZzlitaR0zAsdf9mcr1Bui6/tpcC4VFvqE5yd7AV14xukVbkbiZUB7ZAPxxhMD6VE6SPFFqpF6QEAAABjeyJvcmlnaW4iOiJodHRwczovL2p4Y2suaW86NDQzIiwiZmVhdHVyZSI6IlRydXN0ZWRET01UeXBlcyIsImV4cGlyeSI6MTU2NzI0NjM2NSwiaXNTdWJkb21haW4iOnRydWV9"
        header.add: "Content-Security-Policy: trusted-types https://labs.jxck.io"
        file.file: ./labs.jxck.io/trusted-types/policy.html
      "/cache-control-immutable/large.immutable.bmp":
        header.add: "Cache-Control: max-age=60, immutable"
        file.file: ./labs.jxck.io/cache-control-immutable/large.immutable.bmp
      "/http2/push":
        mruby.handler-file: .mruby.handler/push.rb
        file.dir: ./labs.jxck.io/http2/push
      "/client-hints.html":
        header.add: "Accept-CH: DPR, Content-DPR, Width, Viewport-Width, Save-Data"
        header.add: "Accept-CH-Lifetime: 86400"
        header.add: "Vary: DPR, Content-DPR, Width, Viewport-Width, Save-Data"
        file.file: ./labs.jxck.io/client-hints/basic.html
      "/iframe/1st-party.html":
        header.add: "Set-Cookie: party=1st;"
        file.file: ./labs.jxck.io/iframe/1st-party.html
      "/iframe/3rd-party.html":
        header.add: "Set-Cookie: party=3rd;"
        file.file: ./labs.jxck.io/iframe/3rd-party.html
      "/iframe/tracking.html":
        file.file: ./labs.jxck.io/iframe/tracking.html
      "/iframe/tracking-cookie":
        mruby.handler: |
          Proc.new do |env|
            cookie = rand(1000)
            headers = {
              "Content-Type" => "text/plain",
              "P3P"          => 'CP="This is not a P3P policy!"',
              "Set-Cookie"   => "cookie=#{cookie}"
            }
            [200, headers, ["tracking cookie w/ p3p added"]]
          end
      "/iframe/x-frame-options.html":
        header.add: "X-Frame-Options: deny"
        file.file: ./labs.jxck.io/iframe/x-frame-options.html
      "/feature-policy/sync-xhr/basic.html":
        header.add: "Feature-Policy: sync-xhr 'none'"
        file.file: ./labs.jxck.io/feature-policy/sync-xhr/basic.html
      "/feature-policy/sync-xhr/sandbox.html":
        header.add: "Content-Security-Policy: sandbox allow-scripts"
        header.add: "Feature-Policy: sync-xhr 'none'"
        file.file: ./labs.jxck.io/feature-policy/sync-xhr/sandbox.html
      "/feature-policy/geolocation/basic.html":
        header.add: "Feature-Policy: geolocation https://lab2.jxck.io"
        file.file: ./labs.jxck.io/feature-policy/geolocation/basic.html
      "/feature-policy/geolocation/sandbox.html":
        #header.add: "Content-Security-Policy: sandbox allow-scripts;"
        #header.add: "Feature-Policy: geolocation https://lab2.jxck.io;"
        file.file: ./labs.jxck.io/feature-policy/geolocation/sandbox.html
      "/feature-policy/unsized-media/basic.html":
        header.add: "Feature-Policy: unsized-media 'none'"
        file.file: ./labs.jxck.io/feature-policy/unsized-media/basic.html
      "/webauthentication/fido-u2f/":
        proxy.reverse.url: "http://127.0.0.1:9000/"

      "/webpackaging/signed-http-exchange-b2/mozaic.sxg":
        header.add: "Origin-Trial: AqRrdT6xs8ajyoWFIsg3pmFbJ0qHOFo9eWA+agUU1NMmNOGoSo9KRPKDi6TjuTSRVYZkPzc34ZLPQRw9PhyFxwUAAABxeyJvcmlnaW4iOiJodHRwczovL2p4Y2suaW86NDQzIiwiZmVhdHVyZSI6IlNpZ25lZEhUVFBFeGNoYW5nZU9yaWdpblRyaWFsIiwiZXhwaXJ5IjoxNTQ2MjcxMDI4LCJpc1N1YmRvbWFpbiI6dHJ1ZX0="
        file.file: ./labs.jxck.io/webpackaging/signed-http-exchange-b2/mozaic.sxg

      "/isInputPending":
        header.add: "Origin-Trial: Am+ipb+vzD4tjqTIaJfssfnhwAdaV9c4u9NX6PO/5CRUel6ALwnmN5vyk/DA+TSbqE5FprWcHY+j9vDxh/hqNA8AAABueyJvcmlnaW4iOiJodHRwczovL2p4Y2suaW86NDQzIiwiZmVhdHVyZSI6IkV4cGVyaW1lbnRhbElzSW5wdXRQZW5kaW5nIiwiZXhwaXJ5IjoxNTY3NTU1MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZX0="
        file.dir: ./labs.jxck.io/isInputPending

      "/fetch/api":
        mruby.handler: |
          Proc.new do |env|
            status = 200
            headers = {}
            body = ""

            if (env["REQUEST_METHOD"] == "GET") then
              headers = {
                "Access-Control-Allow-Origin"=> env["HTTP_ORIGIN"]
              }
            elsif (["POST", "PUT", "DELETE"].include?(env["REQUEST_METHOD"])) then
              status = 201
              headers = {
                "Access-Control-Allow-Origin"=> env["HTTP_ORIGIN"]
              }
              body = "done"
            elsif (env["REQUEST_METHOD"] == "OPTIONS") then
              headers = {
                "Access-Control-Allow-Origin"=> env["HTTP_ORIGIN"],
                "Access-Control-Allow-Methods" => "DELETE"
              }
              body = "preflight success"
            else
              status = 405
              body = "expect DELETE method"
            end
            [status, headers, [body]]
          end

      "/clear-site-data/basic.html":
        header.add: "Set-Cookie: cookiefromserver=valueeeeeeeeeeeee; Secure; HttpOnly"
        file.file: ./labs.jxck.io/clear-site-data/basic.html
      "/clear-site-data/executionContexts":
        mruby.handler: |
          Proc.new do |env|
            headers = {}
            headers["Content-Type"] = "text/html"
            headers["Clear-Site-Data"] = %("executionContexts")
            html = <<-EOS
            <!DOCTYPE html>
            <meta charset=utf-8>
            <title>clear executionContexts</title>
            <h1>clear executionContexts</h1>
            EOS
            [200, headers, [html]]
          end
      "/clear-site-data/clear":
        mruby.handler: |
          Proc.new do |env|
            headers = {}
            q = env["QUERY_STRING"]
            q = "*" if q == "all"
            headers["Clear-Site-Data"] = %("#{q}")
            headers["Content-Type"] = "text/html"
            html = <<-EOS
            <!DOCTYPE html>
            <meta charset=utf-8>
            <title>clear #{q}</title>
            <h1>clear #{q}</h1>
            EOS
            [200, headers, [html]]
          end
      "/same-site-cookie/basic.html":
        mruby.handler: |
          Proc.new do |env|
            url = env["HTTP_HOST"]
            headers = {}
            SameSiteCookie = "write=deadbeef; SameSite=strict"
            headers["Set-Cookie"] = SameSiteCookie if url == "labs.jxck.io"
            [399, headers, []]
          end
        file.file: ./labs.jxck.io/same-site-cookie/basic.html
      "/same-site-cookie/post":
        mruby.handler: |
          Proc.new do |env|
            method = env["REQUEST_METHOD"]
            cookie = env["HTTP_COOKIE"]
            origin = env["HTTP_ORIGIN"]
            body   = env["rack.input"] ? env["rack.input"].read : ""

            html = <<-EOS
              <!DOCTYPE html>
              <meta charset=utf-8>
              <title>csrf response</title>
              <dl>
                <dt>method:</dt><dd>#{method}</dd>
                <dt>cookie:</dt><dd>#{cookie}</dd>
                <dt>origin:</dt><dd>#{origin}</dd>
                <dt>body:</dt><dd>#{body}</dd>
              </dl>
            EOS
            [200, {}, [html]]
          end

  "labs.jxck.io:443":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    http2-casper: ON
    listen:
      <<: *https
    paths:
      <<: *labs-path
  "lab2.jxck.io:80":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    listen:
      port: 80
    paths:
      <<: *labs-path
  "lab2.jxck.io:443":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    http2-casper: ON
    listen:
      <<: *https
    paths:
      <<: *labs-path
  "api.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/api.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/random/worker.js":
        header.set: "Origin-Trial: Ai32KiE0NsOIRPR/NxvUwEpcM4hYyo6RPRvkG8liNEIXP4DW6furrliZkqCqZh/ug83oAcdctA12PEh3ymNUZg0AAABneyJvcmlnaW4iOiAiaHR0cHM6Ly9qeGNrLmlvOjQ0MyIsICJpc1N1YmRvbWFpbiI6IHRydWUsICJmZWF0dXJlIjogIkZvcmVpZ25GZXRjaCIsICJleHBpcnkiOiAxNDg0NTgyMTg2fQ=="
        file.file: ./api.jxck.io/random/worker.js
      "/random/number":
        mruby.handler: |
          Proc.new do |env|
            headers = {
              "Content-Type"                 => "text/plain; charset=utf-8",
              "Origin-Trial"                 => "Ai32KiE0NsOIRPR/NxvUwEpcM4hYyo6RPRvkG8liNEIXP4DW6furrliZkqCqZh/ug83oAcdctA12PEh3ymNUZg0AAABneyJvcmlnaW4iOiAiaHR0cHM6Ly9qeGNrLmlvOjQ0MyIsICJpc1N1YmRvbWFpbiI6IHRydWUsICJmZWF0dXJlIjogIkZvcmVpZ25GZXRjaCIsICJleHBpcnkiOiAxNDg0NTgyMTg2fQ==",
              "Link"                         => "</random/worker.js>; rel=\"serviceworker\"",
              "Access-Control-Allow-Methods" => "GET, HEAD, OPTIONS",
              "Access-Control-Allow-Origin"  => "*"
            }
            body = [
              rand(100)
            ]
            [200, headers, body]
          end
      "/random":
        header.add: "Access-Control-Allow-Origin: *"
        mruby.handler-file: .mruby.handler/random.rb
  "spec.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/spec.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        mruby.handler-file: .mruby.handler/auth.rb
        file.dirlisting: ON
        file.dir: ../spec.jxck.io
  "files.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/files.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        mruby.handler-file: .mruby.handler/auth.rb
        file.dirlisting: ON
        file.dir: ../files.jxck.io
  "admin.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/admin.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        mruby.handler-file: .mruby.handler/auth.rb
        file.dir: ./admin.jxck.io
      "/logout":
        mruby.handler: |
          Proc.new do |env|
            headers = {}
            headers["Content-Type"] = "text/plain"
            headers["Clear-Site-Data"] = '"*"'
            [200, headers, ["logout"]]
          end
  "ws.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/ws.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        proxy.websocket: ON
        proxy.reverse.url: "http://127.0.0.1:6000/"
  # "rails.jxck.io:80":
  #   access-log:
  #     <<: *logger
  #     path: ../logs/rails.jxck.io.log
  #   listen:
  #     port: 80
  #   paths:
  #     "/.well-known":
  #       file.dir: ./www.jxck.io/.well-known
  #     "/":
  #       proxy.reverse.url: "http://127.0.0.1:7000/"
  "report-uri.jxck.io:443":
    access-log:
      <<: *logger
      path: ../logs/report-uri.jxck.io.log
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/report-to.cgi":
        file.file: ./report-uri.jxck.io/report-to.cgi
      "/":
        proxy.reverse.url: "http://127.0.0.1:8000/"
  #"sfu.jxck.io:443":
  #  access-log:
  #    <<: *logger
  #    path: ../logs/sfu.jxck.io.log
  #  listen:
  #    <<: *https
  #  paths:
  #    "/.well-known":
  #      file.dir: ./www.jxck.io/.well-known
  #    "/":
  #      proxy.websocket: ON
  #      proxy.reverse.url: "http://127.0.0.1:9000/"
  "logo.jxck.io:80":
    listen:
      port: 80
    paths:
      "/":
        redirect:
          status: 308
          url: https://logo.jxck.io:443/
  "logo.jxck.io:443":
    listen:
      <<: *https
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        file.dirlisting: ON
        file.dir: ./www.jxck.io/assets/logo
  "bootcamp.labs.jxck.io:443":
    listen:
      port: 443
      ssl:
        key-file: /etc/letsencrypt/live/bootcamp.labs.jxck.io/privkey.pem
        certificate-file: /etc/letsencrypt/live/bootcamp.labs.jxck.io/fullchain.pem
        minimum-version: TLSv1.2
        cipher-suite: "AESGCM:HIGH:!3DES:!RSA:!aNULL:!eNULL:!MD5"
        cipher-preference: server
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        file.dir: ./labs.jxck.io
  "bootcamp2.labs.jxck.io:443":
    listen:
      port: 443
      ssl:
        key-file: /etc/letsencrypt/live/bootcamp.labs.jxck.io/privkey.pem
        certificate-file: /etc/letsencrypt/live/bootcamp.labs.jxck.io/fullchain.pem
        minimum-version: TLSv1.2
        cipher-suite: "AESGCM:HIGH:!3DES:!RSA:!aNULL:!eNULL:!MD5"
        cipher-preference: server
    paths:
      "/.well-known":
        file.dir: ./www.jxck.io/.well-known
      "/":
        file.dir: ./labs.jxck.io

  ### mozaic.fm
  "mozaic.fm:80":
    access-log:
      <<: *logger
      path: ../logs/mozaic.fm.log
    listen:
      port: 80
    paths:
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
      "/rss":
        redirect:
          status: 308
          url: http://feed.mozaic.fm:443/
      "/":
        redirect:
          status: 308
          url: https://mozaic.fm:443/
  "mozaic.fm:443":
    access-log:
      <<: *logger
      path: ../logs/mozaic.fm.log
    listen: &mozaic-https
      port: 443
      ssl:
        certificate-file: /etc/letsencrypt/live/mozaic.fm/fullchain.pem
        key-file: /etc/letsencrypt/live/mozaic.fm/privkey.pem
        cipher-suite: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
        cipher-preference: server
    paths:
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
      "/favicon.ico":
        file.file: ./www.jxck.io/assets/img/mozaic.png
      "/apple-touch-icon-precomposed.png":
        file.file: ./www.jxck.io/assets/img/mozaic.png
      "/apple-touch-icon.png":
        file.file: ./www.jxck.io/assets/img/mozaic.png
      "/post":
        mruby.handler-file: .mruby.handler/mozaic.rb
      "/rss":
        redirect:
          status: 308
          url: https://feed.mozaic.fm:443/

      "/cert.cbor":
        file.file: ./labs.jxck.io/webpackaging/tmp/cert.cbor

      "/":
        mruby.handler-file: .mruby.handler/robots.rb
        header.add: "Service-Worker-Allowed: /"
        file.dir: ./mozaic.fm
  "files.mozaic.fm:80":
    access-log:
      <<: *logger
      path: ../logs/files.mozaic.fm.log
    listen:
      port: 80
    paths: &files-mozaic-fm
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
      "/mozaic.png":
        file.file: ./www.jxck.io/assets/img/mozaic.png
      "/mozaic.jpeg":
        file.file: ./www.jxck.io/assets/img/mozaic.jpeg
      "/mozaic.webp":
        file.file: ./www.jxck.io/assets/img/mozaic.webp
      "/mozaic.svg":
        file.file: ./www.jxck.io/assets/img/mozaic.svg
      "/":
        mruby.handler-file: .mruby.handler/mozaic-file.rb
        mruby.handler-file: .mruby.handler/robots.rb
        file.dir: ../files.mozaic.fm
  "files.mozaic.fm:443":
    access-log:
      <<: *logger
      path: ../logs/files.mozaic.fm.log
    listen:
      <<: *mozaic-https
    paths:
      <<: *files-mozaic-fm
  "feed.mozaic.fm:80":
    access-log:
      <<: *logger
      path: ../logs/feed.mozaic.fm.log
    listen:
      port: 80
    paths:
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
      "/":
        header.set: "Content-Type: application/rss+xml; charset=utf-8"
        header.add: "Access-Control-Allow-Methods: GET, HEAD, OPTIONS"
        header.add: "Access-Control-Allow-Origin: *"
        file.file: ./feed.mozaic.fm/index.xml
  "feed.mozaic.fm:443":
    access-log:
      <<: *logger
      path: ../logs/feed.mozaic.fm.log
    listen:
      <<: *mozaic-https
    paths:
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
      "/":
        header.set: "Content-Type: application/rss+xml; charset=utf-8"
        header.add: "Access-Control-Allow-Methods: GET, HEAD, OPTIONS"
        header.add: "Access-Control-Allow-Origin: *"
        file.file: ./feed.mozaic.fm/index.xml
  "labs.mozaic.fm:80":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    listen:
      port: 80
    paths:
      <<: *labs-path
      "/.well-known":
        file.dir: ./mozaic.fm/.well-known
  "labs.mozaic.fm:443":
    access-log:
      path: ./labs.jxck.io/access.log
      format: "%{%Y/%m/%d %H:%M:%S}t.%{msec_frac}t\t%h\t%H\t%s\t%m\t%V\t%U%q\t\"%{User-agent}i\"\t\"%{Referer}i\"\t%{response-time}x\t%{HEADERS}e"
    file.etag: OFF
    http2-casper: ON
    listen:
      <<: *mozaic-https
    paths:
      <<: *labs-path

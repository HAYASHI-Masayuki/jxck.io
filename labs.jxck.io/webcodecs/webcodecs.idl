// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

enum EncodedVideoChunkType {
    "key",
    "delta",
};

[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface EncodedVideoChunk {
  constructor(EncodedVideoChunkType type, unsigned long long timestamp, BufferSource data);
  constructor(EncodedVideoChunkType type, unsigned long long timestamp, unsigned long long duration, BufferSource data);
  readonly attribute EncodedVideoChunkType type;
  // TODO: Add frame dependency information
  readonly attribute unsigned long long timestamp;  // microseconds
  readonly attribute unsigned long long? duration;  // microseconds
  readonly attribute ArrayBuffer data;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary EncodedVideoConfig {
  // Codec string, eg. "avc1.42001e" or "vp09.00.10.08".
  // TODO(sandersd): Accept "avc1" if |description| is provided?
  required DOMString codec;

  // avcC, vpcC, or etc.
  BufferSource description;

  // If provided, these override in-band configuration.
  double sampleAspect;
  // TODO(sandersd): color space.

  // TODO(sandersd): Constraints (sequential access) and requirements
  // (imagebitmap, colorspace conversion).
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/dalecurtis/image-decoder-api/blob/master/explainer.md

// An ImageDecoder decodes images.
[
    Exposed=(Window,Worker),
    RuntimeEnabled=WebCodecs,
    ImplementedAs=ImageDecoderExternal
] interface ImageDecoder {
  [CallWith=ScriptState, RaisesException] constructor(ImageDecoderInit init);

  // Decodes the frame at the given index. If we're still receiving data, this
  // method will wait to resolve the promise until the given |frameIndex| is
  // available or reject the promise if we receive all data or fail before
  // |frameIndex| is available.
  //
  // When |completeFramesOnly| is set to false, partial progressive frames will
  // be returned. When in this mode, decode() calls will resolve only once per
  // new partial image at |frameIndex| until the frame is complete.
  Promise<ImageFrame> decode(optional unsigned long frameIndex = 0,
                             optional boolean completeFramesOnly = true);

  // The number of frames in the image.
  //
  // When decoding a ReadableStream the value will be 0 until enough data to
  // decode the frame count has been received. If the format has no fixed count,
  // the value will increase as frames are received by the decoder.
  readonly attribute unsigned long frameCount;

  // The detected mime type for the decoded image.
  //
  // When decoding a ReadableStream the value will be an empty string until
  // enough data to detect the mime type has been received.
  readonly attribute USVString type;

  // The image's preferred repetition count.
  //
  // When decoding a ReadableStream the value will be 0 until enough data to
  // decode the repetition count has been received.
  readonly attribute unsigned long repetitionCount;

  // True if all available frames have been received by the decoder.
  readonly attribute boolean complete;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

typedef (ArrayBuffer or ArrayBufferView or ReadableStream) ImageBufferSource;
dictionary ImageDecoderInit {
  required ImageBufferSource data;
  ImageBitmapOptions options;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

[ImplementedAs=ImageFrameExternal]
dictionary ImageFrame {
  // Actual decoded image; includes resolution information.
  required ImageBitmap image;

  // Indicates if the decoded image is actually complete.
  required boolean complete;

  // Expected on screen duration for the image in microseconds.
  required unsigned long long duration;

  // JEITA CP-3451 EXIF orientation code.
  required unsigned long orientation;

  // TODO: Color space information?
};



// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

// A VideoDecoder processes a queue of configure, decode, and flush requests.
// Requests are taken from the queue sequentially but may be processed
// concurrently.
//
// TODO(sandersd): Specify a tune() implementation for changing decoder
// parameters (separate from stream parameters). This is more important for
// encoders.
[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface VideoDecoder {
  // |init| includes an |output| callback for emitting VideoFrames and an
  // |error| callback for emitting decode errors.
  //
  // When in an error state, methods other than reset() will fail.
  //
  // TODO(sandersd): Consider adding a state or last error attribute.
  // TODO(sandersd): Consider aborting pending decodes on error, rather than
  // waiting for reset().
  [CallWith=ScriptState, RaisesException] constructor(VideoDecoderInit init);

  // The number of queued decode requests. This does not include requests that
  // have been taken for processing.
  //
  // Applications can minimize underflow by enqueueing decode requests until
  // |decodeQueueSize| is greater than a constant.
  readonly attribute long decodeQueueSize;

  // The number of decode requests currently being processed.
  //
  // Applications can minimize resource consumption and decode latency by
  // enqueueing decode requests only when |decodeQueueSize| and
  // |decodeProcessingCount| are small.
  //
  // TODO(sandersd): Consider counting queued decode requests as well. This
  // could be simpler for apps.
  readonly attribute long decodeProcessingCount;

  // Enqueue a request to set or change the stream configuration.
  //
  // The next enqueued decode request must be for a keyframe.
  //
  // Resolved after emitting output for all earlier decode requests.
  //
  // TODO(sandersd): Test that resolution (a microtask) interleaves between
  // outputs callback calls in all cases.
  // TODO(sandersd): Move the keyframe rule into the bytestream registry.
  [RaisesException] Promise<void> configure(EncodedVideoConfig config);

  // Enqueue a request to decode an input chunk.
  //
  // You must call configure() before calling enqueue() for the first time.
  //
  // Resolved after decoding of the input chunk has started (that is, after
  // decreasing |decodeQueueSize|).
  //
  // TODO(sandersd): Change to a dictionary type.
  // TODO(sandersd): Should we guarantee that resolution occurs in order?
  // TODO(sandersd): Add status to result.
  // TODO(sandersd): Buffer return.
  [RaisesException] Promise<void> decode(EncodedVideoChunk chunk);

  // Enqueue a request to finish decoding queued input chunks.
  //
  // The next enqueued input chunk must be a keyframe.
  //
  // Resolved after emitting output for all earlier decode requests.
  //
  // TODO(sandersd): Consider relaxing the keyframe requirement.
  [RaisesException] Promise<void> flush();

  // Discard all pending work.
  //
  // Output for earlier decode requests will not be emitted, even if processing
  // has already started.
  //
  // The next enqueued input chunk must be a keyframe.
  //
  // Resolved after all earlier enqueue() promises have been resolved.
  //
  // TODO(sandersd): Require configure() after reset()?
  [RaisesException] Promise<void> reset();
};



// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary VideoDecoderInit {
  VideoFrameOutputCallback output;
  WebCodecsErrorCallback error;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary VideoEncoderEncodeOptions {
  boolean? keyFrame;
};


// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface VideoEncoder {
    [CallWith=ScriptState, RaisesException]
    constructor();

    // Performs original configuration of the encoder.
    // Resolved after configuration is done. It should be called only
    // once per encoder instance, before calling any other methods.
    [RaisesException]
    Promise<void> configure(VideoEncoderInit init);

    [RaisesException]
    // Enqueues a request to encode a frame.
    // Results of the encoding (EncodedVideoChunk) are returned via
    // the output callback provided in configure().
    // Resolved when encoded processed the given frame.
    // The output callback can be called before or after the result is resolved.
    // Several encoded requests can be resolved before even a single output
    // is produced.
    Promise<void> encode(VideoFrame frame,
                         optional VideoEncoderEncodeOptions options = {});

    [RaisesException]
    // Enqueues a request to change certain parameters of the encoder.
    // Resolved after the parameters are adjusted.
    // All following encode requests will be executed according to
    // the new parameters.
    // Should be preceded by flush().
    Promise<void> tune(VideoEncoderTuneOptions options);

    // Enqueues a request to produce outputs for all already encoded frames.
    // Resolved after emitting outputs for all previously encoded frames.
    Promise<void> flush();

    // Enqueues a request to shut down the encoder and free its resources.
    // Resolved after all resources are released and all following requests
    // rejected.
    Promise<void> close();
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary VideoEncoderInit {
  required DOMString codec;
  DOMString profile;

  required VideoEncoderTuneOptions tuneOptions;

  // Called whenever there is a new encoded video chunk available.
  required VideoEncoderOutputCallback output;

  // Called when there is a decoding error.
  WebCodecsErrorCallback error;
};


// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

// Handles a new encoded video chunk on the consumer side of the video encoder.
callback VideoEncoderOutputCallback = void (EncodedVideoChunk chunk);


// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary VideoEncoderTuneOptions {
  unsigned long long bitrate;

  double framerate;

  required unsigned long width;
  required unsigned long height;
};


// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs
[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface VideoFrame {
  [RaisesException] constructor(VideoFrameInit init, ImageBitmap source);

  void release();

  readonly attribute unsigned long long timestamp;  // microseconds
  readonly attribute unsigned long long? duration;  // microseconds

  readonly attribute unsigned long codedWidth;
  readonly attribute unsigned long codedHeight;

  readonly attribute unsigned long visibleWidth;
  readonly attribute unsigned long visibleHeight;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

dictionary VideoFrameInit {
  unsigned long long timestamp;  // microseconds
  unsigned long long? duration;  // microseconds
};


// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

[RuntimeEnabled=WebCodecs]
callback VideoFrameOutputCallback = void(VideoFrame output);



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See spec in developement at https://github.com/WICG/web-codecs/blob/master/index.bs
// and https://github.com/WICG/web-codecs/blob/master/explainer.md.
[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface VideoTrackReader {
  [CallWith=ScriptState, RaisesException]
  constructor(MediaStreamTrack track);

  [RaisesException]
  void start(VideoFrameOutputCallback callback);

  [RaisesException]
  void stop();
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See spec in developement at https://github.com/WICG/web-codecs/blob/master/index.bs
// and https://github.com/WICG/web-codecs/blob/master/explainer.md.
[
    Exposed=Window,
    RuntimeEnabled=WebCodecs
] interface VideoTrackWriter {
  [CallWith=ScriptState, RaisesException]
  constructor(VideoTrackWriterParameters params);
  readonly attribute WritableStream writable; // of VideoFrame
  readonly attribute MediaStreamTrack track;
};



// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See spec in developement at https://github.com/WICG/web-codecs/blob/master/index.bs
// and https://github.com/WICG/web-codecs/blob/master/explainer.md.
dictionary VideoTrackWriterParameters {
  boolean releaseFrames = true;
};


// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://github.com/WICG/web-codecs

[RuntimeEnabled=WebCodecs]
callback WebCodecsErrorCallback = void(DOMException error);
